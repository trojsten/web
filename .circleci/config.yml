version: 2


.base: &base
  docker:
    - image: trojsten/web-test:latest
    - image: postgres:9.5
      environment:
        POSTGRES_DB: trojsten
        POSTGRES_USER: trojsten
        POSTGRES_PASSWORD: trojsten_passw0rd

    # - image: elasticsearch:2.4.6
  working_directory: ~/web

jobs:
  build:
    <<: *base
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/web
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            poetry install
      - save_cache:
          paths:
            - ./venv
          key: v6-dependencies-{{ checksum "poetry.lock" }}
  test:
    <<: *base
    environment:
      TROJSTENWEB_DATABASE_URL: 127.0.0.1
      DJANGO_SETTINGS_MODULE: trojsten.settings.test
      TROJSTENWEB_ELASTICSEARCH_TESTS: 0
      # TROJSTENWEB_HAYSTACK_CONNECTIONS_URL: http://elasticsearch:9200
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            bash -c 'cd trojsten; python ../manage.py compilemessages'
            coverage run manage.py test
      - run:
          name: upload coverage
          command: |
            . venv/bin/activate
            curl -s https://codecov.io/bash | bash
  lint:
    <<: *base
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-
      - run:
          name: flake8
          command: |
            . venv/bin/activate
            flake8 trojsten
  migrations:
    <<: *base
    environment:
      TROJSTENWEB_DATABASE_URL: 127.0.0.1
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-
      - run:
          name: check-migrations
          command: |
            . venv/bin/activate
            # Migrations are localized, so translations have to be available for the consistent behaviour.
            bash  -c 'cd trojsten; python ../manage.py compilemessages'
            python ./manage.py makemigrations --dry-run --check
  black:
    <<: *base
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-
      - run:
          name: black
          command: |
            . venv/bin/activate
            black --check trojsten
  isort:
    <<: *base
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-
      - run:
          name: isort
          command: |
            . venv/bin/activate
            isort -rc trojsten --check

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - migrations:
          requires:
            - build
      - black:
          requires:
            - build
      - isort:
          requires:
            - build
